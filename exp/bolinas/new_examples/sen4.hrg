#0-, 1- and 2-edges of 4lang graphs will be called "is", "subj" and "obj", respectively

# delete the root part (for now)
X -> (. :ROOT :root (. :X$0)) | (. :X$0);

# delete copulars
X -> (. :X$1 :cop (. :X$2)) | (. :X$1 :is (. :X$2));

# X nmod_poss Y -> Y HAS X ( Y <-1- HAS -2-> X )
X -> (. :X$1 :nmod_poss (. :X$2)) | (. :HAS :subj (. :X$2) :obj (. :X$1));

# compound = 0-edge
X -> (. :X$1 :compound (. :X$2)) | (. :X$1 :is (. :X$2));

# nummod = 0-edge
X -> (. :X$1 :nummod (. :X$2)) | (. :X$1 :is (. :X$2));

# nsubj = 1-edge
X -> (. :X$1 :nsubj (. :X$2)) | (. :X$1 :subj (. :X$2));

# csubj = 1-edge
X -> (. :X$1 :csubj (. :X$2)) | (. :X$1 :subj (. :X$2));

# dobj = 2-edge
X -> (. :X$1 :dobj (. :X$2)) | (. :X$1 :obj (. :X$2));

# ccomp = 2-edge (will have to be resolved based on the predicate word's definition)
X -> (. :X$1 :ccomp (. :X$2)) | (. :X$1 :obj (. :X$2));

# "this X" becomes X -0-> this (and can be handled later) 
X -> (. :X$1 :det (. :X$2)) | (. :X$1 :is (. :X$2));

# amod = 0-edge
X -> (. :X$1 :amod (. :X$2)) | (. :X$1 :is (. :X$2));

# nmod_of (pl. structure of space; x <--1 of 2--> y ???)
X -> (. :X$1 :nmod_of (. :X$2)) | (. :OF :subj (. :X$2) :obj (. :X$1));

# nmod_for (x <--1 for 2--> y ????)
X -> (. :X$1 :nmod_for (. :X$2)) | (. :FOR :subj (. :X$2) :obj (. :X$1));

# nmod_with (x <--1 with 2--> y ????)
X -> (. :X$1 :nmod_with (. :X$2)) | (. :WITH :subj (. :X$2) :obj (. :X$1));

# expl = 0-edge????
X -> (. :X$1 :expl (. :X$2)) | (. :X$1 :is (. :X$2));

# case = 0-edge????
X -> (. :X$1 :case (. :X$2)) | (. :X$1 :is (. :X$2));

# det_predet = det
X -> (. :X$1 :det_predet (. :X$2)) | (. :X$1 :is (. :X$2));

# advcl = 1-edge ???
X -> (. :X$1 :advcl (. :X$2)) | (. :X$1 :subj (. :X$2));

# advmod = 0-edge
X -> (. :X$1 :advmod (. :X$2)) | (. :X$1 :is (. :X$2));

# compound = 0-edge????
X -> (. :X$1 :compound (. :X$2)) | (. :X$1 :is (. :X$2));

# nmod_to (x <--1 for 2--> y ????)
X -> (. :X$1 :nmod_to (. :X$2)) | (. :TO :subj (. :X$2) :obj (. :X$1));

# acl_by = 1-edge?? /????????????????????????????
X -> (. :X$1 :acl_by (. :X$2)) | (. :X$1 :subj (. :X$2));

# acl_after = 1-edge?? /ezt nagyon nem tudom!
X -> (. :X$1 :acl_after (. :X$2)) | (. :X$1 :subj (. :X$2));

# mark = 1-edge?? /????????????????????????????
X -> (. :X$1 :mark (. :X$2)) | (. :X$1 :subj (. :X$2));


X -> (. :TO) | (. :TO);
X -> (. :a) | (. :a);
X -> (. :after) | (. :after);
X -> (. :all) | (. :all);
X -> (. :are) | (. :are);
X -> (. :by) | (. :by);
X -> (. :decimal) | (. :decimal);
X -> (. :digits) | (. :digits);
X -> (. :equal) | (. :equal);
X -> (. :finite) | (. :finite);
X -> (. :given) | (. :given);
X -> (. :if) | (. :if);
X -> (. :number) | (. :number);
X -> (. :rational) | (. :rational);
X -> (. :ROOT) | (. :ROOT);
X -> (. :sa) | (. :sa);
X -> (. :terms) | (. :terms);
X -> (. :the) | (. :the);
X -> (. :these) | (. :these);
X -> (. :to) | (. :to);
X -> (. :xy) | (. :xy);
X -> (. :zeros) | (. :zeros);


