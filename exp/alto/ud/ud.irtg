
interpretation graph: de.up.ling.irtg.algebra.graph.GraphAlgebra

// [0] - generate root dependency
S! -> _root(V2)
[graph] merge("(ROOT / ROOT :root (d<dep>))", r_dep(?1))

S -> _root(N2)
[graph] merge("(ROOT / ROOT :root (d<dep>))", r_dep(?1))

// ... is [all] you hear
S -> _root(DET)
[graph] merge("(ROOT / ROOT :root (d<dep>))", r_dep(?1))

// X is the POS-tag for misc stuff, e.g. URLs
S -> _root(X)
[graph] merge("(ROOT / ROOT :root (d<dep>))", r_dep(?1))



// [?]
V2 -> _punct(V2, PUNCT)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :punct (d<dep>))"), r_dep(?2))))

N2 -> _punct(N2, PUNCT)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :punct (d<dep>))"), r_dep(?2))))

V1 -> _punct(V1, PUNCT)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :punct (d<dep>))"), r_dep(?2))))

N1 -> _punct(N1, PUNCT)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :punct (d<dep>))"), r_dep(?2))))


// [?]
V -> _aux(V, AUX)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :aux (d<dep>))"), r_dep(?2))))

// [?]
V -> _aux_pass(V, AUX)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :aux_pass (d<dep>))"), r_dep(?2))))

// [1]
V2 -> _nsubj(V1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nsubj (d<dep>))"), r_dep(?2))))

// e.g. "they are the same people" involves nsubj
V2 -> _nsubj(N1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nsubj (d<dep>))"), r_dep(?2))))

// e.g. "everyone is apprehensive" involves nsubj
V2 -> _nsubj(ADJ, N1)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nsubj (d<dep>))"), r_dep(?2))))

// e.g. "`they are targetting...' is all you hear" 
V2 -> _nsubj(N2, V2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nsubj (d<dep>))"), r_dep(?2))))

// [?]
V2 -> _nsubj_pass(V1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nsubj_pass (d<dep>))"), r_dep(?2))))

// [8]
V2 -> _csubj(V1, V1)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :csubj (d<dep>))"), r_dep(?2))))

// "[They] are [targetting] 
V2 -> _csubj(V1, N1)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :csubj (d<dep>))"), r_dep(?2))))

// [?]
V2 -> _csubj_pass(V1, V1)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :csubj_pass (d<dep>))"), r_dep(?2))))

// [?]
N2 -> _nsubj(N1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nsubj (d<dep>))"), r_dep(?2))))

// [?]
N2 -> _nsubj_pass(N1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nsubj_pass (d<dep>))"), r_dep(?2))))

// [?]
N2 -> _csubj(N1, V1)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :csubj (d<dep>))"), r_dep(?2))))

// [?]
V2 -> _csubj_pass(N1, V1)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :csubj_pass (d<dep>))"), r_dep(?2))))



// [9]
V1 -> _obj(V, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :obj (d<dep>))"), r_dep(?2))))


// [?]
V1 -> _iobj(V1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :iobj (d<dep>))"), r_dep(?2))))

// [?]
V1 -> _obl(V1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :obl (d<dep>))"), r_dep(?2))))

// [?] "convoys have headed [out for Fallujah]" (error?)
ADV -> _obl(ADV, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :obl (d<dep>))"), r_dep(?2))))

// [?]
V1 -> _obl_tmod(V1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :obl_tmod (d<dep>))"), r_dep(?2))))

// [?]
V1 -> _obl_npmod(V1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :obl_npmod (d<dep>))"), r_dep(?2))))


// [10] ???

// [??]
V2 -> _advmod(V2, ADV)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :advmod (d<dep>))"), r_dep(?2))))

// [??]
ADV -> _advmod(ADV, ADV)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :advmod (d<dep>))"), r_dep(?2))))

// [??]
ADJ -> _advmod(ADJ, ADV)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :advmod (d<dep>))"), r_dep(?2))))

// [??]
V2 -> _advmod(V2, PART)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :advmod (d<dep>))"), r_dep(?2))))

// [??]
N2 -> _advmod(N2, ADV)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :advmod (d<dep>))"), r_dep(?2))))

// [??]
N2 -> _advmod(N2, PART)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :advmod (d<dep>))"), r_dep(?2))))

// [??]
V2 -> _advcl(V2, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :advcl (d<dep>))"), r_dep(?2))))

// [??]
V2 -> _advcl(V2, V2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :advcl (d<dep>))"), r_dep(?2))))

// [11]
V2 -> _ccomp(V2, V2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :ccomp (d<dep>))"), r_dep(?2))))

// [??]
V2 -> _xcomp(V2, V2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :xcomp (d<dep>))"), r_dep(?2))))

// [??] "X and Y are going to be bloody days"
V2 -> _xcomp(V2, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :xcomp (d<dep>))"), r_dep(?2))))

// [??]
V2 -> _xcomp(V2, ADJ)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :xcomp (d<dep>))"), r_dep(?2))))

// [12] ???

// [13] ???


// [14]
N1 -> _amod(N1, A)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :amod (d<dep>))"), r_dep(?2))))


// [15]
N1 -> _nmod(N1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nmod (d<dep>))"), r_dep(?2))))

// [??]
N1 -> _nmod_poss(N1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nmod_poss (d<dep>))"), r_dep(?2))))

// [??]
N1 -> _nmod_tmod(N1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nmod_tmod (d<dep>))"), r_dep(?2))))

// [??]
N1 -> _nmod_npmod(N1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nmod_npmod (d<dep>))"), r_dep(?2))))

// [??]
N1 -> _compound(N1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :compound (d<dep>))"), r_dep(?2))))

// [??]
V1 -> _compound_prt(V1, ADP)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :compound_prt (d<dep>))"), r_dep(?2))))

// [??]
N1 -> _flat(N1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :flat (d<dep>))"), r_dep(?2))))

// [??]
X1 -> _fixed(X0, X0)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :fixed (d<dep>))"), r_dep(?2))))

// [??]
X1 -> _goeswith(X0, X0)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :goeswith (d<dep>))"), r_dep(?2))))

// [??]
X1 -> _list(X0, X0)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :list (d<dep>))"), r_dep(?2))))

// [??]
X1 -> _parataxis(X0, X0)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :parataxis (d<dep>))"), r_dep(?2))))

// [??]
X1 -> _discourse(X0, X0)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :discourse (d<dep>))"), r_dep(?2))))



// [??]
V1 -> _cc(V1, CCONJ)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :cc (d<dep>))"), r_dep(?2))))

// [??]
N1 -> _cc(N1, CCONJ)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :cc (d<dep>))"), r_dep(?2))))

// [?]
N1 -> _case(N1, ADP)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :case (d<dep>))"), r_dep(?2))))

// e.g. "including"
N1 -> _case(N1, VERB)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :case (d<dep>))"), r_dep(?2))))

// [?]
N1 -> _acl(N1, V2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :acl (d<dep>))"), r_dep(?2))))

// [?]
N1 -> _acl_relcl(N1, V2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :acl_relcl (d<dep>))"), r_dep(?2))))

// ... is [all] [you hear]
N1 -> _acl_relcl(DET, V2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :acl_relcl (d<dep>))"), r_dep(?2))))

// [?]
V1 -> _mark(V1, PART)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :mark (d<dep>))"), r_dep(?2))))

// [?]
V1 -> _mark(V1, SCONJ)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :mark (d<dep>))"), r_dep(?2))))

// [?] "where you might get stuck" (error?)
V1 -> _mark(V1, ADV)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :mark (d<dep>))"), r_dep(?2))))

// [?]
V1 -> _expl(V, PRON)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :expl (d<dep>))"), r_dep(?2))))

// [?]
V1 -> _expl(A, PRON)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :expl (d<dep>))"), r_dep(?2))))

// [?]
N1 -> _mark(N1, PART)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :mark (d<dep>))"), r_dep(?2))))

// [?]
N1 -> _mark(N1, SCONJ)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :mark (d<dep>))"), r_dep(?2))))

// [?]
N1 -> _cop(N1, AUX)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :cop (d<dep>))"), r_dep(?2))))

// [?]
ADJ -> _cop(ADJ, AUX)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :cop (d<dep>))"), r_dep(?2))))

// [?] "All you hear is..."
N1 -> _cop(DET, AUX)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :cop (d<dep>))"), r_dep(?2))))


// [16]
N2 -> _appos(N2, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :appos (d<dep>))"), r_dep(?2))))


// [17]
N1 -> _nummod(N1, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nummod (d<dep>))"), r_dep(?2))))

// [17]
N1 -> _nummod(N1, NUM)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nummod (d<dep>))"), r_dep(?2))))



// [18]
N1 -> _det(N1, DET)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :det (d<dep>))"), r_dep(?2))))

// [18]
N1 -> _det_predet(N1, DET)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :det_predet (d<dep>))"), r_dep(?2))))


// [2]
N2 -> _orphan(N1, N1)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :orphan (d<dep>))"), r_dep(?2))))


// [3]
V2 -> _conj(V2, V2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :conj (d<dep>))"), r_dep(?2))))

N2 -> _conj(N2, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :conj (d<dep>))"), r_dep(?2))))

// e.g. "Kut is in southeastern Iraq and has an overwhelmingly Shiite population"
V2 -> _conj(N2, V2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :conj (d<dep>))"), r_dep(?2))))

V2 -> _conj(V2, N2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :conj (d<dep>))"), r_dep(?2))))


N2 -> _nbar(N1)
[graph] ?1

N1 -> _nbar(N)
[graph] ?1

V2 -> _vbar(V1)
[graph] ?1

V1 -> _vbar(V)
[graph] ?1

V -> _pos(VERB)
[graph] ?1

// e.g. "X is equivalent to Y" involves nsubj and obl
V -> _pos(ADJ)
[graph] ?1

N -> _pos(NOUN)
[graph] ?1

// "[most] of them returned"
N -> _pos(ADJ)
[graph] ?1

N -> _pos(PRON)
[graph] ?1

N -> _pos(NUM)
[graph] ?1

N -> _pos(PROPN)
[graph] ?1

A -> _pos(ADJ)
[graph] ?1


// a dozen cases involve the det relation involving not a DET but one of these
DET -> _pos(PRON)
[graph] ?1

DET -> _pos(ADJ)
[graph] ?1

DET -> _pos(NUM)
[graph] ?1

DET -> _pos(ADP)
[graph] ?1

DET -> _pos(PUNCT)
[graph] ?1

DET -> _pos(PRON)
[graph] ?1

DET -> _pos(PRON)
[graph] ?1



// X is used only with the following dependencies:
// fixed, parataxis, discourse, list, goeswith

N -> _x1(X1)
[graph] ?1

V -> _x1(X1)
[graph] ?1

// "as opposed to" (fixed)
ADP -> _x1(X1)
[graph] ?1

X0 -> _xn2(N2)
[graph] ?1

X0 -> _xv2(V2)
[graph] ?1

X0 -> _xa(A)
[graph] ?1

X0 -> _xadp(ADP)
[graph] ?1

X0 -> _xadv(ADV)
[graph] ?1

X0 -> _xadj(ADJ)
[graph] ?1

X0 -> _xsconj(SCONJ)
[graph] ?1

X0 -> _xcconj(CCONJ)
[graph] ?1

X0 -> _xpart(PART)
[graph] ?1

X0 -> _xintj(INTJ)
[graph] ?1

X0 -> _xsym(SYM)
[graph] ?1
