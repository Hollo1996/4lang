(ROOT
 (S
   (NP
     (NP (DT a) (JJ small) (NN one))
     (NP (DT The) (NN situation)))
   (VP (VBZ is)
     (ADVP (RB only))
     (VP (VBG going)
       (S
         (VP (TO to)
           (VP (VB get)
             (NP
               (NP (JJR better))
               (NP (DT this) (NN way))))))))
   (. .)))

S! -> _root(_VERB)
[tree] ROOT(?1)
[graph] merge("(ROOT / ROOT :root (d<dep>))", r_dep(?1))
[fourlang] ?1

_VERB -> _punct(_VERB, _PUNCT)
[tree]
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :punct (d<dep>))"), r_dep(?2))))
[fourlang] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :_ (d<dep>))"), r_dep(?2))))

_VERB -> _aux(_VERB, _AUX)
[tree]
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :aux (d<dep>))"), r_dep(?2))))
[fourlang] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :_ (d<dep>))"), r_dep(?2))))

_VERB -> _nsubj(_VERB, _NOUN)
[tree]
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :nsubj (d<dep>))"), r_dep(?2))))
[fourlang] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :1 (d<dep> :0 g))"), r_dep(?2))))

_VERB -> _xcomp(_VERB, _ADJ) // I don't find the news that (...) hopeful
[tree]
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :xcomp (d<dep>))"), r_dep(?2))))
[fourlang] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :2 (d<dep>))"), r_dep(?2))))

_VERB -> _xcomp(_VERB, _VERB) // continue to penetrate
[tree]
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :xcomp (d<dep>))"), r_dep(?2))))
[fourlang] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :2 (d<dep>))"), r_dep(?2))))

_NOUN -> _det(_NOUN, _DET) // a cleric
[tree] NP2(?1,?2)
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :det (d<dep>))"), r_dep(?2))))
[fourlang] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :det (d<dep>))"), r_dep(?2))))

_VERB -> _mark(_VERB, _SCONJ) // that they had busted up
[tree] 
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :mark (d<dep>))"), r_dep(?2))))
[fourlang] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :_ (d<dep>))"), r_dep(?2))))

_VERB -> _advmod(_VERB, _ADV)
[tree]
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :advmod (d<dep>))"), r_dep(?2))))
[fourlang] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :is_a (d<dep>))"), r_dep(?2))))

_ADJ -> _obj(_ADJ, _NOUN) // going to get better this way
[tree]
[graph] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :obj (d<dep>))"), r_dep(?2))))
[fourlang] r_gov_root(f_dep(merge(merge(r_gov(?1), "(g<gov> :2 (d<dep>))"), r_dep(?2))))



//MIDDLE NODES
//MIDDLE NODES

_VERBPHRASE -> _lonelyVerb(_VERB)
[tree] VP(?1)
[graph] ?
[fourlang] ?

_NOUNPHRASE -> _lonelyAdjective(_ADJ)
[tree] NP(?1)
[graph] ?
[fourlang] ?

_NOUNPHRASE -> _lonelyNoun(_NOUN)
[tree] NP(?1)
[graph] ?
[fourlang] ?

_NOUNPHRASE -> _Noun_and_Adjective(_NOUN,_ADJ)
[tree] NP2(?2,?1)
[graph] ?
[fourlang] ?

_NOUNPHRASE -> _Noun_and_Determinant(_NOUN,_DET)
[tree] NP2(?2,?1)
[graph] ?
[fourlang] ?

_NOUNPHRASE_PART -> _Noun_with_Determinant(_NOUN,_ADJ)
[tree] NP3(*,?2,?1)
[graph] ?
[fourlang] ?

_NOUNPHRASE -> _Noun_and_Adjective_and_Determinant(_NOUNPHRASE_PART,_DET)
[tree] @(?1,?2)
[graph] ?
[fourlang] ?

//LEAFS
//LEAFS

PUNCT -> PERIOD_PUNCT
[tree] (. .)
[graph] "(PERIOD<root> / PERIOD)"
[fourlang] "(PERIOD<root> / PERIOD)"

_NOUN -> situation_NOUN
[tree] NN(situation)
[graph] "(situation<root> / situation)"
[fourlang] "(situation<root> / situation)"

_AUX -> is_AUX
[tree] VBZ(is)
[graph] "(is<root> / is)"
[fourlang] "(is<root> / is)"

_DET -> The_DET
[tree] DT(The)
[graph] "(The<root> / The)"
[fourlang] "(The<root> / The)"

_VERB -> going_VERB
[tree] VBG(going)
[graph] "(going<root> / going)"
[fourlang] "(going<root> / going)"

_SCONJ -> to_SCONJ
[tree] TO(to)
[graph] "(to<root> / to)"
[fourlang] "(to<root> / to)"

_ADV -> only_ADV
[tree] RB(only)
[graph] "(only<root> / only)"
[fourlang] "(only<root> / only)"

_VERB -> get_VERB
[tree] VB(get)
[graph] "(get<root> / get)"
[fourlang] "(get<root> / get)"

_ADJ -> better_ADJ
[tree] JJR(better)
[graph] "(better<root> / better)"
[fourlang] "(better<root> / better)"

_NOUN -> way_NOUN
[tree] NN(way)
[graph] "(way<root> / way)"
[fourlang] "(way<root> / way)"

_DET -> this_DET
[tree] DT(this)
[graph] "(this<root> / this)"
[fourlang] "(this<root> / this)"
